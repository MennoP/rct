package main

import (
	"fmt"
	"os"
)

func hasBit(n int, pos uint) bool {
	val := n & (1 << pos)
	return (val > 0)
}

var elementNames = []string{
	"ELEM_FLAT",
	"ELEM_END_STATION",
	"ELEM_BEGIN_STATION",
	"ELEM_MIDDLE_STATION",
	"ELEM_25_DEG_UP",
	"ELEM_60_DEG_UP",
	"ELEM_FLAT_TO_25_DEG_UP",
	"ELEM_25_DEG_UP_TO_60_DEG_UP",
	"ELEM_60_DEG_UP_TO_25_DEG_UP",
	"ELEM_25_DEG_UP_TO_FLAT",
	"ELEM_25_DEG_DOWN",
	"ELEM_60_DEG_DOWN",
	"ELEM_FLAT_TO_25_DEG_DOWN",
	"ELEM_25_DEG_DOWN_TO_60_DEG_DOWN",
	"ELEM_60_DEG_DOWN_TO_25_DEG_DOWN",
	"ELEM_25_DEG_DOWN_TO_FLAT",
	"ELEM_LEFT_QUARTER_TURN_5_TILES",
	"ELEM_RIGHT_QUARTER_TURN_5_TILES",
	"ELEM_FLAT_TO_LEFT_BANK",
	"ELEM_FLAT_TO_RIGHT_BANK",
	"ELEM_LEFT_BANK_TO_FLAT",
	"ELEM_RIGHT_BANK_TO_FLAT",
	"ELEM_BANKED_LEFT_QUARTER_TURN_5_TILES",
	"ELEM_BANKED_RIGHT_QUARTER_TURN_5_TILES",
	"ELEM_LEFT_BANK_TO_25_DEG_UP",
	"ELEM_RIGHT_BANK_TO_25_DEG_UP",
	"ELEM_25_DEG_UP_TO_LEFT_BANK",
	"ELEM_25_DEG_UP_TO_RIGHT_BANK",
	"ELEM_LEFT_BANK_TO_25_DEG_DOWN",
	"ELEM_RIGHT_BANK_TO_25_DEG_DOWN",
	"ELEM_25_DEG_DOWN_TO_LEFT_BANK",
	"ELEM_25_DEG_DOWN_TO_RIGHT_BANK",
	"ELEM_LEFT_BANK",
	"ELEM_RIGHT_BANK",
	"ELEM_LEFT_QUARTER_TURN_5_TILES_25_DEG_UP",
	"ELEM_RIGHT_QUARTER_TURN_5_TILES_25_DEG_UP",
	"ELEM_LEFT_QUARTER_TURN_5_TILES_25_DEG_DOWN",
	"ELEM_RIGHT_QUARTER_TURN_5_TILES_25_DEG_DOWN",
	"ELEM_S_BEND_LEFT",
	"ELEM_S_BEND_RIGHT",
	"ELEM_LEFT_VERTICAL_LOOP",
	"ELEM_RIGHT_VERTICAL_LOOP",
	"ELEM_LEFT_QUARTER_TURN_3_TILES",
	"ELEM_RIGHT_QUARTER_TURN_3_TILES",
	"ELEM_LEFT_QUARTER_TURN_3_TILES_BANK",
	"ELEM_RIGHT_QUARTER_TURN_3_TILES_BANK",
	"ELEM_LEFT_QUARTER_TURN_3_TILES_25_DEG_UP",
	"ELEM_RIGHT_QUARTER_TURN_3_TILES_25_DEG_UP",
	"ELEM_LEFT_QUARTER_TURN_3_TILES_25_DEG_DOWN",
	"ELEM_RIGHT_QUARTER_TURN_3_TILES_25_DEG_DOWN",
	"ELEM_LEFT_QUARTER_TURN_1_TILE",
	"ELEM_RIGHT_QUARTER_TURN_1_TILE",
	"ELEM_LEFT_TWIST_DOWN_TO_UP",
	"ELEM_RIGHT_TWIST_DOWN_TO_UP",
	"ELEM_LEFT_TWIST_UP_TO_DOWN",
	"ELEM_RIGHT_TWIST_UP_TO_DOWN",
	"ELEM_HALF_LOOP_UP",
	"ELEM_HALF_LOOP_DOWN",
	"ELEM_LEFT_CORKSCREW_UP",
	"ELEM_RIGHT_CORKSCREW_UP",
	"ELEM_LEFT_CORKSCREW_DOWN",
	"ELEM_RIGHT_CORKSCREW_DOWN",
	"ELEM_FLAT_TO_60_DEG_UP",
	"ELEM_60_DEG_UP_TO_FLAT",
	"ELEM_FLAT_TO_60_DEG_DOWN",
	"ELEM_60_DEG_DOWN_TO_FLAT",
	"ELEM_TOWER_BASE",
	"ELEM_TOWER_SECTION",
	"ELEM_FLAT_COVERED",
	"ELEM_25_DEG_UP_COVERED",
	"ELEM_60_DEG_UP_COVERED",
	"ELEM_FLAT_TO_25_DEG_UP_COVERED",
	"ELEM_25_DEG_UP_TO_60_DEG_UP_COVERED",
	"ELEM_60_DEG_UP_TO_25_DEG_UP_COVERED",
	"ELEM_25_DEG_UP_TO_FLAT_COVERED",
	"ELEM_25_DEG_DOWN_COVERED",
	"ELEM_60_DEG_DOWN_COVERED",
	"ELEM_FLAT_TO_25_DEG_DOWN_COVERED",
	"ELEM_25_DEG_DOWN_TO_60_DEG_DOWN_COVERED",
	"ELEM_60_DEG_DOWN_TO_25_DEG_DOWN_COVERED",
	"ELEM_25_DEG_DOWN_TO_FLAT_COVERED",
	"ELEM_LEFT_QUARTER_TURN_5_TILES_COVERED",
	"ELEM_RIGHT_QUARTER_TURN_5_TILES_COVERED",
	"ELEM_S_BEND_LEFT_COVERED",
	"ELEM_S_BEND_RIGHT_COVERED",
	"ELEM_LEFT_QUARTER_TURN_3_TILES_COVERED",
	"ELEM_RIGHT_QUARTER_TURN_3_TILES_COVERED",
	"ELEM_LEFT_HALF_BANKED_HELIX_UP_SMALL",
	"ELEM_RIGHT_HALF_BANKED_HELIX_UP_SMALL",
	"ELEM_LEFT_HALF_BANKED_HELIX_DOWN_SMALL",
	"ELEM_RIGHT_HALF_BANKED_HELIX_DOWN_SMALL",
	"ELEM_LEFT_HALF_BANKED_HELIX_UP_LARGE",
	"ELEM_RIGHT_HALF_BANKED_HELIX_UP_LARGE",
	"ELEM_LEFT_HALF_BANKED_HELIX_DOWN_LARGE",
	"ELEM_RIGHT_HALF_BANKED_HELIX_DOWN_LARGE",
	"ELEM_LEFT_QUARTER_TURN_1_TILE_60_DEG_UP",
	"ELEM_RIGHT_QUARTER_TURN_1_TILE_60_DEG_UP",
	"ELEM_LEFT_QUARTER_TURN_1_TILE_60_DEG_DOWN",
	"ELEM_RIGHT_QUARTER_TURN_1_TILE_60_DEG_DOWN",
	"ELEM_BRAKES",
	"ELEM_ROTATION_CONTROL_TOGGLE",
	"ELEM_INVERTED_90_DEG_UP_TO_FLAT_QUARTER_LOOP",
	"ELEM_LEFT_QUARTER_BANKED_HELIX_LARGE_UP",
	"ELEM_RIGHT_QUARTER_BANKED_HELIX_LARGE_UP",
	"ELEM_LEFT_QUARTER_BANKED_HELIX_LARGE_DOWN",
	"ELEM_RIGHT_QUARTER_BANKED_HELIX_LARGE_DOWN",
	"ELEM_LEFT_QUARTER_HELIX_LARGE_UP",
	"ELEM_RIGHT_QUARTER_HELIX_LARGE_UP",
	"ELEM_LEFT_QUARTER_HELIX_LARGE_DOWN",
	"ELEM_RIGHT_QUARTER_HELIX_LARGE_DOWN",
	"ELEM_25_DEG_UP_LEFT_BANKED",
	"ELEM_25_DEG_UP_RIGHT_BANKED",
	"ELEM_WATERFALL",
	"ELEM_RAPIDS",
	"ELEM_ON_RIDE_PHOTO",
	"ELEM_25_DEG_DOWN_LEFT_BANKED",
	"ELEM_25_DEG_DOWN_RIGHT_BANKED",
	"ELEM_WATER_SPLASH",
	"ELEM_FLAT_TO_60_DEG_UP_LONG_BASE",
	"ELEM_60_DEG_UP_TO_FLAT_LONG_BASE",
	"ELEM_WHIRLPOOL",
	"ELEM_FLAT_TO_60_DEG_DOWN_LONG_BASE",
	"ELEM_60_DEG_UP_TO_FLAT_LONG_BASE",
	"ELEM_CABLE_LIFT_HILL",
	"ELEM_REVERSE_WHOA_BELLY_SLOPE",
	"ELEM_REVERSE_WHOA_BELLY_VERTICAL",
	"ELEM_90_DEG_UP",
	"ELEM_90_DEG_DOWN",
	"ELEM_60_DEG_UP_TO_90_DEG_UP",
	"ELEM_90_DEG_DOWN_TO_60_DEG_DOWN",
	"ELEM_90_DEG_UP_TO_60_DEG_UP",
	"ELEM_60_DEG_DOWN_TO_90_DEG_DOWN",
	"ELEM_BRAKE_FOR_DROP",
	"ELEM_LEFT_EIGHTH_TO_DIAG",
	"ELEM_RIGHT_EIGHTH_TO_DIAG",
	"ELEM_LEFT_EIGHTH_TO_ORTHOGONAL",
	"ELEM_RIGHT_EIGHTH_TO_ORTHOGONAL",
	"ELEM_LEFT_EIGHTH_BANK_TO_DIAG",
	"ELEM_RIGHT_EIGHTH_BANK_TO_DIAG",
	"ELEM_LEFT_EIGHTH_BANK_TO_ORTHOGONAL",
	"ELEM_RIGHT_EIGHTH_BANK_TO_ORTHOGONAL",
	"ELEM_DIAG_FLAT",
	"ELEM_DIAG_25_DEG_UP",
	"ELEM_DIAG_60_DEG_UP",
	"ELEM_DIAG_FLAT_TO_25_DEG_UP",
	"ELEM_DIAG_25_DEG_UP_TO_60_DEG_UP",
	"ELEM_DIAG_60_DEG_UP_TO_25_DEG_UP",
	"ELEM_DIAG_25_DEG_UP_TO_FLAT",
	"ELEM_DIAG_25_DEG_DOWN",
	"ELEM_DIAG_60_DEG_DOWN",
	"ELEM_DIAG_FLAT_TO_25_DEG_DOWN",
	"ELEM_DIAG_25_DEG_DOWN_TO_60_DEG_DOWN",
	"ELEM_DIAG_60_DEG_DOWN_TO_25_DEG_DOWN",
	"ELEM_DIAG_25_DEG_DOWN_TO_FLAT",
	"ELEM_DIAG_FLAT_TO_60_DEG_UP",
	"ELEM_DIAG_60_DEG_UP_TO_FLAT",
	"ELEM_DIAG_FLAT_TO_60_DEG_DOWN",
	"ELEM_DIAG_60_DEG_DOWN_TO_FLAT",
	"ELEM_DIAG_FLAT_TO_LEFT_BANK",
	"ELEM_DIAG_FLAT_TO_RIGHT_BANK",
	"ELEM_DIAG_LEFT_BANK_TO_FLAT",
	"ELEM_DIAG_RIGHT_BANK_TO_FLAT",
	"ELEM_DIAG_LEFT_BANK_TO_25_DEG_UP",
	"ELEM_DIAG_RIGHT_BANK_TO_25_DEG_UP",
	"ELEM_DIAG_25_DEG_UP_TO_LEFT_BANK",
	"ELEM_DIAG_25_DEG_UP_TO_RIGHT_BANK",
	"ELEM_DIAG_LEFT_BANK_TO_25_DEG_DOWN",
	"ELEM_DIAG_RIGHT_BANK_TO_25_DEG_DOWN",
	"ELEM_DIAG_25_DEG_DOWN_TO_LEFT_BANK",
	"ELEM_DIAG_25_DEG_DOWN_TO_RIGHT_BANK",
	"ELEM_DIAG_LEFT_BANK",
	"ELEM_DIAG_RIGHT_BANK",
	"ELEM_LOG_FLUME_REVERSER",
	"ELEM_SPINNING_TUNNEL",
	"ELEM_LEFT_BARREL_ROLL_UP_TO_DOWN",
	"ELEM_RIGHT_BARREL_ROLL_UP_TO_DOWN",
	"ELEM_LEFT_BARREL_ROLL_DOWN_TO_UP",
	"ELEM_RIGHT_BARREL_ROLL_DOWN_TO_UP",
	"ELEM_LEFT_BANK_TO_LEFT_QUARTER_TURN_3_TILES_25_DEG_UP",
	"ELEM_RIGHT_BANK_TO_RIGHT_QUARTER_TURN_3_TILES_25_DEG_UP",
	"ELEM_LEFT_QUARTER_TURN_3_TILES_25_DEG_DOWN_TO_LEFT_BANK",
	"ELEM_RIGHT_QUARTER_TURN_3_TILES_25_DEG_DOWN_TO_RIGHT_BANK",
	"ELEM_POWERED_LIFT",
	"ELEM_LEFT_LARGE_HALF_LOOP_UP",
	"ELEM_RIGHT_LARGE_HALF_LOOP_UP",
	"ELEM_RIGHT_LARGE_HALF_LOOP_DOWN",
	"ELEM_LEFT_LARGE_HALF_LOOP_DOWN",
}

var rides = []string{
	"Spiral Roller coaster",
	"Stand Up Coaster",
	"Suspended Swinging",
	"Inverted",
	"Steel Mini Coaster",
	"Mini Railroad",
	"Monorail",
	"Mini Suspended Coaster",
	"Bumper Boats",
	"Wooden Wild Mine/Mouse",
	"Steeplechase/Motorbike/Soap Box Derby",
	"Car Ride",
	"Launched Freefall",
	"Bobsleigh Coaster",
	"Flying Turns",
	"Observation Tower",
	"Looping Roller Coaster",
	"Dinghy Slide",
	"Mine Train Coaster",
	"Chairlift",
	"Corkscrew Roller Coaster",
	"Maze",
	"Spiral Slide",
	"Go Karts",
}

func main() {
	f, err := os.Open(os.Getenv("HOME") + "/code/OpenRCT2/openrct2.exe")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	var WIDTH = 10
	b := make([]byte, 256*WIDTH)
	addr := 0x005972bb
	f.ReadAt(b, int64(addr))

	var colHeaderFmt = "%55s "
	// header row
	fmt.Printf(colHeaderFmt, "Number")
	for j := 0; j < WIDTH; j++ {
		fmt.Printf("%4x ", addr+j-0x590000)
	}
	fmt.Printf("\n")

	for i := 0; i < len(elementNames)+30; i++ {
		if i < len(elementNames) {
			fmt.Printf(colHeaderFmt, elementNames[i])
		} else {
			fmt.Printf(colHeaderFmt, "unknown")
		}
		for j := 0; j < WIDTH; j++ {
			bijint := int(b[i*WIDTH+j])
			fmt.Printf("%4d ", bijint)
		}
		fmt.Printf("\n")
	}
}
